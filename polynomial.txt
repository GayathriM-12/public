#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int coefficient, int exponent) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coefficient = coefficient;
    newNode->exponent = exponent;
    newNode->next = NULL;
    return newNode;
}

// Insert term in polynomial in descending order of exponents
void insertTerm(struct Node** poly, int coefficient, int exponent) {
    struct Node* newNode = createNode(coefficient, exponent);
    if (*poly == NULL || (*poly)->exponent < exponent) {
        newNode->next = *poly;
        *poly = newNode;
    } else {
        struct Node* temp = *poly;
        while (temp->next != NULL && temp->next->exponent > exponent)
            temp = temp->next;
        if (temp->next != NULL && temp->next->exponent == exponent)
            temp->next->coefficient += coefficient;
        else {
            newNode->next = temp->next;
            temp->next = newNode;
        }
    }
}

// Add two polynomials
struct Node* addPolynomials(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;
    while (poly1 != NULL || poly2 != NULL) {
        if (poly1 == NULL) insertTerm(&result, poly2->coefficient, poly2->exponent), poly2 = poly2->next;
        else if (poly2 == NULL) insertTerm(&result, poly1->coefficient, poly1->exponent), poly1 = poly1->next;
        else if (poly1->exponent > poly2->exponent) insertTerm(&result, poly1->coefficient, poly1->exponent), poly1 = poly1->next;
        else if (poly1->exponent < poly2->exponent) insertTerm(&result, poly2->coefficient, poly2->exponent), poly2 = poly2->next;
        else insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent), poly1 = poly1->next, poly2 = poly2->next;
    }
    return result;
}

// Function to print a polynomial
void displayPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf("%dx^%d", poly->coefficient, poly->exponent);
        poly = poly->next;
        if (poly != NULL)
            printf(" + ");
    }
    printf("\n");
}

// Main function
int main() {
    struct Node *poly1 = NULL, *poly2 = NULL;

    // Polynomial 1: 3x^3 + 5x^2 + 6
    insertTerm(&poly1, 3, 3);
    insertTerm(&poly1, 5, 2);
    insertTerm(&poly1, 6, 0);

    // Polynomial 2: 4x^2 + 2x + 1
    insertTerm(&poly2, 4, 2);
    insertTerm(&poly2, 2, 1);
    insertTerm(&poly2, 1, 0);

    // Display the polynomials
    printf("Polynomial 1: ");
    displayPolynomial(poly1);
    printf("Polynomial 2: ");
    displayPolynomial(poly2);

    // Add polynomials
    struct Node* sum = addPolynomials(poly1, poly2);
    printf("Sum: ");
    displayPolynomial(sum);

    return 0;
}
